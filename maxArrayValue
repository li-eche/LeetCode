//合并后数组最大元素
/*给你一个下标从 0 开始、由正整数组成的数组 nums 。

你可以在数组上执行下述操作 任意 次：

选中一个同时满足 0 <= i < nums.length - 1 和 nums[i] <= nums[i + 1] 的整数 i 。将元素 nums[i + 1] 替换为 nums[i] + nums[i + 1] ，并从数组中删除元素 nums[i] 。
返回你可以从最终数组中获得的 最大 元素的值。*/
class Solution {
    public long maxArrayValue(int[] nums) {
        int  n = nums.length;
        long merged = nums[n - 1];    // 合并后的元素，初始为最后一个数
        // 我们要让后面的数尽可能大，才能合并更多的元素
        // 因此倒序遍历
        for(int i = n - 2; i >= 0; i--){
            if(nums[i] <= merged){
                // 当前元素小于等于当前合并数，可以合入
                merged += nums[i];
            }else{
                // 否则不能合入，重新合并元素
                merged = nums[i];
            }
        }
        return merged;    // merged始终维护的是最大合并元素
    }
}

